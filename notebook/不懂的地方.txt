
multiply

synchronized

stream().map
option类转化为实体类
属性拷贝的时候注意：null也会被拷贝过去
Valid
gson

spring.jackson.default-property-inclusion=non_null
所有为null 的字段都不返回。

首先解释面上意思，service是业务层，dao是数据访问层。
呵呵，这个问题我曾经也有过，记得以前刚学编程的时候，都是在service里直接调用dao，
service里面就new一个dao类对象，调用，其他有意义的事没做，也不明白有这个有什么用，
参加工作久了以后就会知道，业务才是工作中的重中之重。
我们都知道，标准主流现在的编程方式都是采用MVC综合设计模式，MVC本身不属于设计模式的一种，
它描述的是一种结构，最终目的达到解耦，解耦说的意思是你更改某一层代码，不会影响我其他层代码，
如果你会像spring这样的框架，你会了解面向接口编程，表示层调用控制层，控制层调用业务层，业务层调用数据访问层。
初期也许都是new对象去调用下一层，比如你在业务层new一个DAO类的对象，调用DAO类方法访问数据库，这样写是不对的，
因为在业务层中是不应该含有具体对象，最多只能有引用，如果有具体对象存在，就耦合了。当那个对象不存在，
我还要修改业务的代码，这不符合逻辑。好比主板上内存坏了，我换内存，没必要连主板一起换。我不用知道内存是哪家生产，
不用知道多大容量，只要是内存都可以插上这个接口使用。这就是MVC的意义。
接下来说你感觉service的意义，其实因为你现在做东西分层次不是那么严格，在一个你们做东西业务本身也少，
举个最简单的例子，你做一个分页的功能，数据1000条，你20条在一个页，你可以把这个功能写成工具类封装起来，
然后在业务层里调用这个封装的方法，这才是业务里真正干得事，只要没访问数据库的，都要在业务里写。

传入参数的id必须跟你实体类的id一样

左连接就是左边去找右边的，找不到右边匹配的就是null
 a表     id   name     b表     id   job   parent_id   
              1   张3                   1     23     1   
              2   李四                 2     34     2   
              3   王武                 3     34     4   



  2）左连接   
  select   a.*,b.*   from   a   left   join   b     on   a.id=b.parent_id       
  结果是     
  1   张3                   1     23     1   
  2   李四                  2     34     2   
  3   王武                  null   
对dao，dto，vo,的一些理解
dto：Data Transfer Object数据传输对象
应用场景：
主要用于远程调用等需要大量传输对象的地方。
比如我们一张表有100个字段，那么对应的PO就有100个属性。
但是我们界面上只要显示10个字段，
客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，
这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO
vo：主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。
比如在某页面上需要显示很多数据，但是一个po搞不定，这是你就可以自己定义Vo去处理了。
dao：Entity 实体
实体bean ，一般是用于ORM 对象关系映射 ，一个实体映射成一张表，一般无业务逻辑代码。
如果是简单的java对象就是pojo，如果进行了持久化有了orm映射以后就是po。
po的作用简单的说就是将数据库中的表映射成java对象，就是属性对应数据库字段。

MyBatis 插入空值时，需要指定JdbcType 
mybatis insert空值报空值异常，但是在pl/sql不会提示错误，主要原因是mybatis无法进行转换，
