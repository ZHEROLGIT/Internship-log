
multiply

synchronized

stream().map
option类转化为实体类
属性拷贝的时候注意：null也会被拷贝过去
Valid
gson

spring.jackson.default-property-inclusion=non_null
所有为null 的字段都不返回。

首先解释面上意思，service是业务层，dao是数据访问层。
呵呵，这个问题我曾经也有过，记得以前刚学编程的时候，都是在service里直接调用dao，
service里面就new一个dao类对象，调用，其他有意义的事没做，也不明白有这个有什么用，
参加工作久了以后就会知道，业务才是工作中的重中之重。
我们都知道，标准主流现在的编程方式都是采用MVC综合设计模式，MVC本身不属于设计模式的一种，
它描述的是一种结构，最终目的达到解耦，解耦说的意思是你更改某一层代码，不会影响我其他层代码，
如果你会像spring这样的框架，你会了解面向接口编程，表示层调用控制层，控制层调用业务层，业务层调用数据访问层。
初期也许都是new对象去调用下一层，比如你在业务层new一个DAO类的对象，调用DAO类方法访问数据库，这样写是不对的，
因为在业务层中是不应该含有具体对象，最多只能有引用，如果有具体对象存在，就耦合了。当那个对象不存在，
我还要修改业务的代码，这不符合逻辑。好比主板上内存坏了，我换内存，没必要连主板一起换。我不用知道内存是哪家生产，
不用知道多大容量，只要是内存都可以插上这个接口使用。这就是MVC的意义。
接下来说你感觉service的意义，其实因为你现在做东西分层次不是那么严格，在一个你们做东西业务本身也少，
举个最简单的例子，你做一个分页的功能，数据1000条，你20条在一个页，你可以把这个功能写成工具类封装起来，
然后在业务层里调用这个封装的方法，这才是业务里真正干得事，只要没访问数据库的，都要在业务里写。


